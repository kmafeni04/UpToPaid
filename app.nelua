local nttp = require "nttp.nttp"

## if PROD then
  ## NORM_DB = "PG"
## else
  ## NORM_DB = "SQLITE"
## end
local norm = require "norm.norm"

local Option = nttp.variant.Option

local datastar = require "nttp-datastar-sdk.datastar"
local nelt = require "nelt.nelt"

local bcrypt = require ".utils.bcrypt"

local auth_controller = require ".controllers.auth"
local transactions_controller = require ".controllers.transactions"

require "map-nelua.map"

local env, err = require("dotenv-nelua.dotenv").load()
## if not PROD then
  assert(err == "", err)
## end

local schema = norm.Schema
local type = schema.ColumnType

## if PROD then
  local db, err = norm.Db.new({
    name = env:get("PGDATABASE"),
    user = env:get("PGUSER"),
    password =  env:get("PGPASSWORD"),
    host =  env:get("PGHOST"),
    port = tointeger(env:get("PGPORT"))
  })

  local err = schema.migrate(db, map!(string, norm.Schema.MigrationFn, {
    ["1755348573"] = function(db: norm.Db): string
      local err = schema.create_table(db, "users", {
        { "id",       type.serial, { primary_key = true } },
        { "username", type.varchar, { unique = true } },
        { "email",    type.varchar, { unique = true } },
        { "password", type.varchar }
      })
      return err
    end,

    ["1755348585"] = function(db: norm.Db): string
      local err = schema.create_table(db, "transactions", {
        { "id",          type.serial, { primary_key = true } },
        { "time",        type.integer },
        { "name",        type.varchar },
        { "amount",      type.real },
        { "type",        type.varchar },
        { "description", type.varchar },
        { "user_id",     type.integer },
      })
      return err
    end
  }))
## else
  ## if TEST then
    local db, err = norm.Db.new({
      name = ":memory:"
    })
  ## else
    local db, err = norm.Db.new({
      name = "app.db"
    })
  ## end

  local err = schema.migrate(db, map!(string, norm.Schema.MigrationFn, {
    ["1750497533"] = function(db: norm.Db): string
      local err = schema.create_table(db, "users", {
        { "id",       type.integer, { primary_key = true } },
        { "username", type.text, { unique = true } },
        { "email",    type.text, { unique = true } },
        { "password", type.text }
      }, { strict = true })
      return err
    end,

    ["1750722036"] = function(db: norm.Db): string
      local _, err = db:insert("users", map!(string, string, {
        username = "testuser",
        email = "test@test.com",
        password = bcrypt.encrypt("testpassword")
      }))
      return err
    end,

    ["1750890982"] = function(db: norm.Db): string
      local err = schema.create_table(db, "transactions", {
        { "id",          type.integer, { primary_key = true } },
        { "time",        type.integer },
        { "name",        type.text },
        { "amount",      type.real },
        { "type",        type.text },
        { "description", type.text },
        { "user_id",     type.integer },
      }, { strict = true })
      return err
    end
  }))
## end

assert(err == "", err)

local app = nttp.Server.new({
  port = 8080
})

## if not PROD then
  app.static_headers = map!(string, string, {
    ["Cache-Control"] = ""
  })
## end

local Users, err = norm.Model.new(&db, "users", "Users", {
  rels = {
    {
      kind = norm.RelationKind.has_many,
      rel = {
        name = "transactions",
        model_name = "Transactions",
      }
    }
  }
})
assert(err == "", err)

local Transactions, err = norm.Model.new(&db, "transactions", "Transactions", {
  rels = {
    {
      kind = norm.RelationKind.belongs_to,
      rel = {
        name = "user",
        model_name = "Users",
      }
    }
  }
})
assert(err == "", err)

app:before_filter(function(self: *nttp.Server): Option(nttp.Response)
  nttp.csrf.generate_token(self)
  return Option.None()
end)

app:before_filter(function(self: *nttp.Server): Option(nttp.Response)
  local logged_in_routes = map!(string, boolean, {
    [self:url_for("login")] = true,
    [self:url_for("signup")] = true,
    [self:url_for("forgot_password")] = true,
  })
  if self.session:get_val("current_user") ~= "" and logged_in_routes:has(self.req.current_path) then
    return Option.Some(self:redirect(self:url_for("dashboard")))
  end
  return Option.None()
end)

app:get("index", "/", function(self: *nttp.Server): nttp.Response
  if self.session:get_val("current_user") ~= "" then
    return self:redirect(self:url_for("dashboard"))
  end
  local index = require ".templates.index-nelt"
  local tp: nelt.Template
  index(&tp, self)
  return self:html(nttp.Status.OK, tp:tostring())
end)

app:get("login", "/login", function(self: *nttp.Server): nttp.Response
  return auth_controller.login_get(self)
end)

app:post("login", "/login", function(self: *nttp.Server): nttp.Response
  if not nttp.csrf.validate_token(self) then
    return self:text(nttp.Status.Forbidden, "forbidden")
  end
  return auth_controller.login_post(self, Users)
end)

app:get("signup", "/signup", function(self: *nttp.Server): nttp.Response
  return auth_controller.signup_get(self)
end)

app:post("signup", "/signup", function(self: *nttp.Server): nttp.Response
  if not nttp.csrf.validate_token(self) then
    return self:text(nttp.Status.Forbidden, "forbidden")
  end
  return auth_controller.signup_post(self, Users)
end)

app:post("logout", "/logout", function(self: *nttp.Server): nttp.Response
  local resp = datastar.csrf(self)
  if resp:is_some() then
    return resp:get_some()
  end
  return auth_controller.logout(self)
end)

app:get("forgot_password", "/forgot-password", function(self: *nttp.Server): nttp.Response
  return auth_controller.forgot_password_get(self)
end)

app:post("forgot_password", "/forgot-password", function(self: *nttp.Server): nttp.Response
  if not nttp.csrf.validate_token(self) then
    return self:text(nttp.Status.Forbidden, "forbidden")
  end
  return auth_controller.forgot_password_post(self, Users)
end)

app:post("password_reset_sent", "/forgot-password/code-sent", function(self: *nttp.Server): nttp.Response
  if not nttp.csrf.validate_token(self) then
    return self:text(nttp.Status.Forbidden, "forbidden")
  end
  return auth_controller.password_reset_sent(self)
end)

app:post("password_reset", "/forgot-password/reset", function(self: *nttp.Server): nttp.Response
  if not nttp.csrf.validate_token(self) then
    return self:text(nttp.Status.Forbidden, "forbidden")
  end
  return auth_controller.password_reset(self, Users)
end)

app:get("home", "/home", function(self: *nttp.Server): nttp.Response
  return self:redirect(self:url_for("dashboard"))
end)

app:get("dashboard", "/home/dashboard", function(self: *nttp.Server): nttp.Response
  local current_user = self.session:get_val("current_user")
  if current_user == "" then
    return self:redirect(self:url_for("login"))
  end
  local current_user_id = self.session:get_val("current_user_id")
  local dashboard = require ".templates.dashboard-nelt"
  local tp: nelt.Template
  local transactions, err = Transactions:select(map!(string, string, {
    user_id = current_user_id
  }), { extra_sql = "ORDER BY time DESC" })
  if err ~= "" then
    io.stderr:write(err .. "\n")
    return self:error()
  end
  tp.data = &transactions
  dashboard(&tp, self)
  return self:html(nttp.Status.OK, tp:tostring())
end)

app:get("new_transaction", "/transactions/create", function(self: *nttp.Server): nttp.Response
  return transactions_controller.new_transaction(self)
end)

app:post("transactions", "/transactions", function(self: *nttp.Server): nttp.Response
  if not nttp.csrf.validate_token(self) then
    return self:text(nttp.Status.Forbidden, "forbidden")
  end
  return transactions_controller.transactions_post(self, Transactions)
end)

app:get("update_transaction", "/transactions/:id/update", function(self: *nttp.Server): nttp.Response
  return transactions_controller.update_transaction(self, Transactions)
end)

app:put("transaction", "/transactions/:id", function(self: *nttp.Server): nttp.Response
  if not nttp.csrf.validate_token(self) then
    return self:text(nttp.Status.Forbidden, "forbidden")
  end
  return transactions_controller.transaction_put(self, Transactions)
end)

app:delete("transaction", "/transactions/:id", function(self: *nttp.Server): nttp.Response
  local resp = datastar.csrf(self)
  if resp:is_some() then
    return resp:get_some()
  end
  return transactions_controller.transaction_delete(self, Transactions)
end)

app:get("analytics_chart", "/analytics-chart", function(self: *nttp.Server): nttp.Response
  return transactions_controller.analytics_chart(self, Transactions)
end)

app:get("goals", "/home/goals", function(self: *nttp.Server): nttp.Response
  if self.session:get_val("current_user") == "" then
    return self:redirect(self:url_for("login"))
  end
  local goals = require ".templates.goals-nelt"
  local tp: nelt.Template
  goals(&tp, self)
  return self:html(nttp.Status.OK, tp:tostring())
end)

app:get("profile", "/home/profile", function(self: *nttp.Server): nttp.Response
  if self.session:get_val("current_user") == "" then
    return self:redirect(self:url_for("login"))
  end
  local profile = require ".templates.profile-nelt"
  local tp: nelt.Template
  profile(&tp, self)
  return self:html(nttp.Status.OK, tp:tostring())
end)

## if TEST then
  local test = require ".test"
  test(app)
## else
  app:serve()
## end
