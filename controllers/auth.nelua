local nttp = require "nttp.nttp"
local datastar = require "nttp-datastar-sdk.datastar"
local norm = require "norm.norm"
local nelt = require "nelt.nelt"
local mail = require "nttp-mail.mail"
local env, err = require("dotenv-nelua.dotenv").load()
## if not PROD then
  assert(err == "", err)
## end

local bcrypt = require "..utils.bcrypt"

local mailer_username = env:get("MAILER_USERNAME")
assert(mailer_username ~= "", "env 'MAILER_USERNAME' was empty")

local mailer_password = env:get("MAILER_PASSWORD")
assert(mailer_password ~= "", "env 'MAILER_PASSWORD' was empty")

local mailer, err = mail.new({
  host = "smtp.gmail.com",
  port = 587,
  starttls = true,
  username = mailer_username,
  password = mailer_password,
})
assert(err == "", err)

local auth_controller = @record{}

function auth_controller.login_get(self: *nttp.Server)
  local login = require "..templates.login-nelt"
  local tp: nelt.Template
  login(&tp, self)
  return self:html(nttp.Status.OK, tp:tostring())
end

function auth_controller.login_post(self: *nttp.Server, Users: norm.Model)
  local errors: sequence(string)
  local username = nttp.utils.trim_wspace(self.req.params["username"])
  local password = self.req.params["password"]

  if username == "" then
    errors:push("Username is required")
  end
  if #username < 5 then
    errors:push("Username must be 5 characters or more")
  end
  if password == "" then
    errors:push("Password is required")
  end
  if #password < 9 then
    errors:push("Password must be 9 characters or more")
  end
  local user, err = Users:find(map!(string, string, { username = username }))
  if err ~= "" then
    io.stderr:write(err .. "\n")
    return self:error()
  end
  if not next(user.row) then
    errors:push("Username does not exist")
  else
    local stored_password_hash, err = user:get_col("password")
    if err ~= "" then
      io.stderr:write(err .. "\n")
      return self:error()
    end
    local ok, err = bcrypt.verify(password, stored_password_hash)
    if err ~= "" then
      io.stderr:write(err .. "\n")
      return self:error()
    end
    if not ok then
      errors:push("Incorrect password")
    end
  end

  if #errors ~= 0 then
    self.req.params["errors"] = string.concat(errors, "\n") .. "\n"
    local login = require "..templates.login-nelt"
    local tp: nelt.Template
    login(&tp, self)
    return self:html(nttp.Status.OK, tp:tostring())
  end
  self.session:set_val("current_user", username)
  self.session:set_val("current_user_id", user:get_col("id"))
  return self:redirect(self:url_for("dashboard"))
end

function auth_controller.signup_get(self: *nttp.Server)
  local signup = require "..templates.signup-nelt"
  local tp: nelt.Template
  signup(&tp, self)
  return self:html(nttp.Status.OK, tp:tostring())
end

function auth_controller.signup_post(self: *nttp.Server, Users: norm.Model): nttp.Response
  local errors: sequence(string)
  local username = nttp.utils.trim_wspace(self.req.params["username"])
  local email = nttp.utils.trim_wspace(self.req.params["email"]:lower())
  local password = self.req.params["password"]
  local confirm_password = self.req.params["confirm-password"]

  if username == "" then
    errors:push("Username is required")
  end
  if #username < 5 then
    errors:push("Username must be 5 characters or more")
  end
  if username ~= "" then
    local user, err = Users:find(map!(string, string, {
      username = username
    }))
    if err ~= "" then
      io.stderr:write(err .. "\n")
      return self:error()
    end
    if next(user.row) then
      errors:push("Username already exists")
    end
  end
  if email == "" then
    errors:push("Email is required")
  end
  if not email:match("[%w_]+@[%w_]+%.[%w][%w]+") then
    errors:push("Email must be a valid email")
  end
  if email ~= "" then
    local user, err = Users:find(map!(string, string, {
      email = email
    }))
    if err ~= "" then
      io.stderr:write(err .. "\n")
      return self:error()
    end
    if next(user.row) then
      errors:push("Email already exists")
    end
  end
  if password == "" then
    errors:push("Password is required")
  end
  if #password < 9 then
    errors:push("Password must be 9 characters or more")
  end
  if confirm_password == "" then
    errors:push("Confirm password is required")
  end
  if password ~= confirm_password then
    errors:push("Password and confirm password do not match")
  end
  if #errors ~= 0 then
    self.req.params["errors"] = string.concat(errors, "\n") .. "\n"
    local signup = require "..templates.signup-nelt"
    local tp: nelt.Template
    signup(&tp, self)
    return self:html(nttp.Status.OK, tp:tostring())
  end

  math.randomseed(os.time())
  local code = tostring(math.random(1000, 9999))
  self.session:set_val("signup_code", code)
  local err = mailer:send({
    from = ("leonard mafeni <%s>"):format(mailer_username),
    to = { email },
    subject = "UpToPaid: Signup code",
    content_type = "text/html",
    body = ([[<p>Do not reply</p>
<p>Your signup code is:</p>
<h2>%s</h2>
<p>If you did not try to signup, kindly ignore this email</p>]]):format(code),
  })
  if err ~= "" then
    io.stderr:write(err .. "\n")
    return self:error()
  end

  self.req.params["username"] = username
  self.req.params["email"] = email
  self.req.params["password"] = password
  local signup_confirm = require "..templates.signup-confirm-nelt"
  local tp: nelt.Template
  signup_confirm(&tp, self)
  return self:html(nttp.Status.OK, tp:tostring())
end

function auth_controller.signup_confirm(self: *nttp.Server, Users: norm.Model)
  local errors: sequence(string)
  local username = self.req.params["username"]
  local email = self.req.params["email"]
  local password = self.req.params["password"]
  local signup_code = nttp.utils.trim_wspace(self.req.params["signup-code"])

  if signup_code == "" then
    errors:push("Reset code cannot be empty")
  end
  if signup_code ~= self.session:get_val("signup_code") then
    errors:push("Incorrect signup code")
  end
  if #errors ~= 0 then
    self.req.params["errors"] = string.concat(errors, "\n") .. "\n"
    self.req.params["username"] = username
    self.req.params["email"] = email
    self.req.params["password"] = password
    local signup_confirm = require "..templates.signup-confirm-nelt"
    local tp: nelt.Template
    signup_confirm(&tp, self)
    return self:html(nttp.Status.OK, tp:tostring())
  end

  local user, err = Users:create(map!(string, string, {
    username = username,
    email = email,
    password = bcrypt.encrypt(password),
  }))
  if err ~= "" then
    io.stderr:write(err .. "\n")
    return self:error()
  end
  self.session:set_val("current_user", username)
  self.session:set_val("current_user_id", user:get_col("id"))
  return self:redirect(self:url_for("dashboard"))
end

function auth_controller.logout(self: *nttp.Server)
  local err = self.session:set_val("current_user", "")
  if err ~= "" then
    io.stderr:write(err .. "\n")
    return self:error()
  end
  local err = self.session:set_val("current_user_id", "")
  if err ~= "" then
    io.stderr:write(err .. "\n")
    return self:error()
  end
  local sseg, err = datastar.ServerSentEventGenerator.new(self)
  if err ~= "" then
    io.stderr:write(err .. "\n")
    return self:error()
  end
  sseg:redirect(self:url_for("index"))
  return sseg.resp
end

function auth_controller.forgot_password_get(self: *nttp.Server)
  local forgot_password = require "..templates.forgot_password-nelt"
  local tp: nelt.Template
  forgot_password(&tp, self)
  return self:html(nttp.Status.OK, tp:tostring())
end

function auth_controller.forgot_password_post(self: *nttp.Server, Users: norm.Model)
  local errors: sequence(string)
  local param_email = self.req.params["email"]
  local user, err = Users:find(map!(string, string, {
    email = param_email,
  }))
  if err ~= "" or not next(user.row) then
    errors:push("Email does not exist")
  end
  if #errors > 0 then
    self.req.params["errors"] = string.concat(errors, "\n") .. "\n"
    local forgot_password = require "..templates.forgot_password-nelt"
    local tp: nelt.Template
    forgot_password(&tp, self)
    return self:html(nttp.Status.OK, tp:tostring())
  end
  self.session:set_val("reset_email", param_email)

  math.randomseed(os.time())
  local code = tostring(math.random(1000, 9999))
  self.session:set_val("reset_code", code)
  local err = mailer:send({
    from = ("leonard mafeni <%s>"):format(mailer_username),
    to = { param_email },
    subject = "UpToPaid: Password Reset",
    content_type = "text/html",
    body = ([[<p>Do not reply</p>
<p>Your reset code is:</p>
<h2>%s</h2>
<p>If you did not request to reset your password, kindly ignore this email</p>]]):format(code),
  })
  if err ~= "" then
    io.stderr:write(err .. "\n")
    return self:error()
  end
  local password_reset_sent = require "..templates.password_reset_sent-nelt"
  local tp: nelt.Template
  password_reset_sent(&tp, self)
  return self:html(nttp.Status.OK, tp:tostring())
end

function auth_controller.password_reset_sent(self: *nttp.Server)
  local errors: sequence(string)
  local reset_code = nttp.utils.trim_wspace(self.req.params["reset-code"])
  if reset_code == "" then
    errors:push("Reset code cannot be empty")
  end
  if reset_code ~= self.session:get_val("reset_code") then
    errors:push("Incorrect reset code")
  end
  if #errors ~= 0 then
    self.req.params["errors"] = string.concat(errors, "\n") .. "\n"
    local password_reset_sent = require "..templates.password_reset_sent-nelt"
    local tp: nelt.Template
    password_reset_sent(&tp, self)
    return self:html(nttp.Status.OK, tp:tostring())
  end
  local password_reset_form = require "..templates.password_reset_form-nelt"
  local tp: nelt.Template
  password_reset_form(&tp, self)
  return self:html(nttp.Status.OK, tp:tostring())
end

function auth_controller.password_reset(self: *nttp.Server, Users: norm.Model)
  local email = self.session:get_val("reset_email")
  local password = self.req.params["password"]
  local confirm_password = self.req.params["confirm-password"]

  local errors: sequence(string)
  if email == "" then
    errors:push("Email is required")
  end
  if not email:match("[%w_]+@[%w_]+%.[%w][%w]+") then
    errors:push("Email must be a valid email")
  end
  if password == "" then
    errors:push("Password is required")
  end
  if #password < 9 then
    errors:push("Password must be 9 characters or more")
  end
  if confirm_password == "" then
    errors:push("Confirm password is required")
  end
  if password ~= confirm_password then
    errors:push("Password and confirm password do not match")
  end
  local user, err = Users:find(map!(string, string, {
    email = email
  }))
  if err ~= "" then
    io.stderr:write(err .. "\n")
    return self:error()
  end
  if not next(user.row) then
    errors:push("User does not exist")
  end
  if #errors ~= 0 then
    self.req.params["errors"] = string.concat(errors, "\n") .. "\n"
    local password_reset_form = require "..templates.password_reset_form-nelt"
    local tp: nelt.Template
    password_reset_form(&tp, self)
    return self:html(nttp.Status.OK, tp:tostring())
  end
  user:update(map!(string, string, {
    password = bcrypt.encrypt(password)
  }))
  return self:redirect(self:url_for("login"))
end

return auth_controller
