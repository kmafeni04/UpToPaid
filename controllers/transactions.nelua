-- TODO: Abstract repetive patch_elements calls into single function

local nttp = require "nttp.nttp"
local datastar = require "nttp-datastar-sdk.datastar"
local norm = require "norm.norm"
local nelt = require "nelt.nelt"

local transaction_form = require "..templates.components.transaction-form-nelt"
local transactions_table = require "..templates.components.transactions-table-nelt"
local analytics_chart = require "..templates.components.analytics-chart-nelt"

local empty_transactions_table = require "..templates.fragments.empty-transactions-table-nelt"
local empty_analytics_chart = require "..templates.fragments.empty-analytics-chart-nelt"

local transactions_controller = @record{}

local function date_to_time(date: string)
  local matched, match_seq = date:match("(%d+)-(%d+)-(%d+)")

  local year = tonumber(match_seq[1])
  local month = tonumber(match_seq[2])
  local day = tonumber(match_seq[3])

  local time = os.time({
    year = year,
    month = month,
    day = day,
  })

  return time
end

function transactions_controller.new_transaction(self: *nttp.Server)
  local sseg, err = datastar.ServerSentEventGenerator.new(self)
  if err ~= "" then
io.stderr:write(err .. "\n")    return self:error()
  end

  local tp: nelt.Template
  transaction_form(&tp, self, "@post('" .. self:url_for("transactions") .. "', { contentType: 'form' })",  os.time())
  sseg:patch_elements(tp:tostring(), {
    selector = "body",
    mode = datastar.ElementPatchMode.Append
  })

  return sseg.resp
end

local function validate_transactions_form(self: *nttp.Server)
  local errors: sequence(string)
  local date = self.req.params["date"]
  if date == "" then
    errors:push("<li>Date is required</li>")
  end
  local date_match = date:match("%d%d%d%d%-%d%d%-%d%d")
  if not date_match then
    errors:push("<li>Malformed date</li>")
  end
  local name = self.req.params["name"]
  if name == "" then
    errors:push("<li>Name is required</li>")
  end
  if #name < 3 then
    errors:push("<li>Name must be 3 or more characters</li>")
  end

  local amount_number: number
  local amount = self.req.params["amount"]
  if not amount:match("^[%-+]?%d+%.?%d*$") then
    errors:push("<li>Malformed number amount</li>")
  else
    amount_number = tonumber(amount)
  end
  if amount_number <= 0 then
    errors:push("<li>Amount must be greater than 0</li>")
  end
  local type = self.req.params["type"]
  if type == "" then
    errors:push("<li>Name is required</li>")
  end
  if type ~= "Income" and type ~= "Expense" then
    errors:push("<li>Unknown transaction type</li>")
  end
  local description = self.req.params["description"]
  return errors, date, name, amount, type, description
end

function transactions_controller.transactions_post(self: *nttp.Server, Transactions: norm.Model)
  local current_user_id = self.session:get_val("current_user_id")
  if current_user_id == "" then
    print("Failed to determine current_user")
    return self:error()
  end

  local sseg, err = datastar.ServerSentEventGenerator.new(self)
  if err ~= "" then
    io.stderr:write(err .. "\n")
    return self:error()
  end

  local errors, date, name, amount, type, description = validate_transactions_form(self)
  if #errors > 0 then
    sseg:patch_elements(('<ul id="errors">%s</ul>'):format(string.concat(errors)))
    return sseg.resp
  end

  local transaction, err = Transactions:create(map!(string, string, {
		time = tostring(date_to_time(date)),
		name = name,
		amount = amount,
		type = type,
		description = description,
		user_id = current_user_id,
  }))
  if err ~= "" then
    sseg:patch_elements('<ul id="errors"><li>Internal error occured</li></ul>')
    return sseg.resp
  end

  local transactions, err = Transactions:select(map!(string, string, {
    user_id = current_user_id
  }), { extra_sql = "ORDER BY time DESC"})
  if err ~= "" then
    sseg:patch_elements('<ul id="errors"><li>Internal error occured</li></ul>')
    return sseg.resp
  end

  local transaction_income: number
  local transaction_expenses: number
  for _, transaction in ipairs(transactions) do
    if transaction:get_col("type") == "Income" then
      local num = transaction:get_col("amount")
      transaction_income = transaction_income + tonumber(num)
    elseif transaction:get_col("type") == "Expense" then
      local num = transaction:get_col("amount")
      transaction_expenses = transaction_expenses + tonumber(num)
    end
  end

  sseg:remove_elements("#transaction_form_popup")

  local tp: nelt.Template
  tp.data = &transactions
  transactions_table(&tp, self)
  sseg:patch_elements(tp:tostring(), {
    mode = datastar.ElementPatchMode.Replace
  })

  sseg:patch_elements(([[<div id="analytics" data-effect="@get('%s')"></div>]]):format(self:url_for("analytics_chart")))

  sseg:patch_signals((
    [[{ "transaction_income": %s, "transaction_expenses": %s }]]
  ):format(("%.2f"):format(transaction_income), ("%.2f"):format(transaction_expenses)))
  return sseg.resp
end

function transactions_controller.update_transaction(self: *nttp.Server, Transactions: norm.Model)
  local id = self.req.params["id"]
  if id == "" then
    print("Transaction ID was an empty string")
    return self:error()
  end

  local transaction, err = Transactions:find(map!(string, string, {
    id = id
  }))
  if err ~= "" then
    io.stderr:write(err .. "\n")
    return self:error()
  end

  local sseg, err = datastar.ServerSentEventGenerator.new(self)
  if err ~= "" then
    io.stderr:write(err .. "\n")
    return self:error()
  end

  local time = transaction:get_col("time")
  local name = transaction:get_col("name")
  local amount = transaction:get_col("amount")
  local type = transaction:get_col("type")
  local description = transaction:get_col("description")


  local tp: nelt.Template
  transaction_form(&tp, self, "@put('" .. self:url_for("transaction", { route_params = map!(string, string, { id = id }) }) .. "', { contentType: 'form' })", tointeger(time), name, amount, type, description)
  sseg:patch_elements(tp:tostring(), {
    selector = "body",
    mode = datastar.ElementPatchMode.Append
  })

  return sseg.resp
end

function transactions_controller.transaction_put(self: *nttp.Server, Transactions: norm.Model)
  local current_user_id = self.session:get_val("current_user_id")
  if current_user_id == "" then
    print("Failed to determine current_user")
    return self:error()
  end

  local id = self.req.params["id"]
  if id == "" then
    print("Transaction ID was an empty string")
    return self:error()
  end

  local transaction, err = Transactions:find(map!(string, string, {
    id = id,
    user_id = current_user_id
  }))
  if err ~= "" then
    io.stderr:write(err .. "\n")
    return self:error()
  end

  local sseg, err = datastar.ServerSentEventGenerator.new(self)
  if err ~= "" then
    io.stderr:write(err .. "\n")
    return self:error()
  end

  local errors, date, name, amount, type, description = validate_transactions_form(self)
  if #errors > 0 then
    sseg:patch_elements(('<ul id="errors">%s</ul>'):format(string.concat(errors)))
    return sseg.resp
  end

  local transaction, err = transaction:update(map!(string, string, {
		time = tostring(date_to_time(date)),
		name = name,
		amount = amount,
		type = type,
		description = description,
  }))
  if err ~= "" then
    sseg:patch_elements('<ul id="errors"><li>Internal error occured</li></ul>')
    return sseg.resp
  end

  local transactions, err = Transactions:select(map!(string, string, {
    user_id = current_user_id
  }), { extra_sql = "ORDER BY time DESC"})
  if err ~= "" then
    sseg:patch_elements('<ul id="errors"><li>Internal error occured</li></ul>')
    return sseg.resp
  end

  local transaction_income: number
  local transaction_expenses: number
  for _, transaction in ipairs(transactions) do
    if transaction:get_col("type") == "Income" then
      local num = transaction:get_col("amount")
      transaction_income = transaction_income + tonumber(num)
    elseif transaction:get_col("type") == "Expense" then
      local num = transaction:get_col("amount")
      transaction_expenses = transaction_expenses + tonumber(num)
    end
  end

  sseg:remove_elements("#transaction_form_popup")

  local tp: nelt.Template
  tp.data = &transactions
  transactions_table(&tp, self)
  sseg:patch_elements(tp:tostring(), {
    mode = datastar.ElementPatchMode.Replace
  })

  sseg:patch_elements(([[<div id="analytics" data-effect="@get('%s')"></div>]]):format(self:url_for("analytics_chart")))

  sseg:patch_signals((
    [[{ "transaction_income": %s, "transaction_expenses": %s }]]
  ):format(("%.2f"):format(transaction_income), ("%.2f"):format(transaction_expenses)))
  return sseg.resp
end

function transactions_controller.transaction_delete(self: *nttp.Server, Transactions: norm.Model)
  local current_user_id = self.session:get_val("current_user_id")
  if current_user_id == "" then
    print("Failed to determine current_user")
    return self:error()
  end

  local id = self.req.params["id"]
  if id == "" then
    return self:error()
  end

  local transaction, err = Transactions:find(map!(string, string, {
    id = id,
    user_id = current_user_id
  }))
  if err ~= "" then
    io.stderr:write(err .. "\n")
    return self:error()
  end

  local err = transaction:delete()
  if err ~= "" then
    io.stderr:write(err .. "\n")
    return self:error()
  end

  local transactions, err = Transactions:select(map!(string, string, {
    user_id = current_user_id
  }), { extra_sql = "ORDER BY time DESC"})
  if err ~= "" then
    io.stderr:write(err .. "\n")
    return self:error()
  end

  local transaction_income: number
  local transaction_expenses: number
  for _, transaction in ipairs(transactions) do
    if transaction:get_col("type") == "Income" then
      local num = transaction:get_col("amount")
      transaction_income = transaction_income + tonumber(num)
    elseif transaction:get_col("type") == "Expense" then
      local num = transaction:get_col("amount")
      transaction_expenses = transaction_expenses + tonumber(num)
    end
  end

  local sseg, err = datastar.ServerSentEventGenerator.new(self)
  if err ~= "" then
    io.stderr:write(err .. "\n")
    return self:error()
  end

  if #transactions > 0 then
    local tp: nelt.Template
    tp.data = &transactions
    transactions_table(&tp, self)
    sseg:patch_elements(tp:tostring(), {
      mode = datastar.ElementPatchMode.Replace
    })

    sseg:patch_elements(([[<div id="analytics" data-effect="@get('%s')"></div>]]):format(self:url_for("analytics_chart")))
  else
    local tp: nelt.Template
    empty_transactions_table(&tp, self)
    sseg:patch_elements(tp:tostring())

    empty_analytics_chart(&tp)
    sseg:patch_elements(tp:tostring())
  end
  sseg:patch_signals((
    [[{ "transaction_income": %s, "transaction_expenses": %s }]]
  ):format(("%.2f"):format(transaction_income), ("%.2f"):format(transaction_expenses)))

  return sseg.resp
end

function transactions_controller.analytics_chart(self: *nttp.Server, Transactions: norm.Model): nttp.Response
  local current_user_id = self.session:get_val("current_user_id")
  if current_user_id == "" then
    io.stderr:write("Failed to determine current_user\n")
    return self:error()
  end

  local transactions, err = Transactions:select(map!(string, string, {
    user_id = current_user_id
  }))
  if err ~= "" then
    io.stderr:write(err .. "\n")
    return self:error()
  end

  local sseg, err = datastar.ServerSentEventGenerator.new(self)
  if err ~= "" then
    io.stderr:write(err .. "\n")
    return self:error()
  end

  sseg:patch_elements('<div id="analytics"></div>')
  local sort: string

  local signals, err = datastar.read_signals(self)
  if err == "" then
    local obj = signals:get_obj()
    if obj:has("sort") then
      sort = obj["sort"]:get_str()
    end
  end

  sort = sort ~= "" and sort or "day"

  local time = os.time()

  local function is_same_day(t1: integer, t2: integer): boolean <inline>
    return os.date("%Y-%m-%d", t1) == os.date("%Y-%m-%d", t2)
  end

  local function is_same_week(t1: integer, t2: integer) <inline>
    return  os.date("%U", t1) ==  os.date("%U", t2) and os.date("%Y", t1) == os.date("%Y", t2)
  end

  local function is_same_month(t1: integer, t2: integer) <inline>
    return os.date("%B", t1) == os.date("%B", t2) and os.date("%Y", t1) == os.date("%Y", t2)
  end

  local function is_same_year(t1: integer, t2: integer) <inline>
    return os.date("%Y", t1) == os.date("%Y", t2)
  end

  local function get_week_of_month(fmt: string, t: integer): string
    local current_day_str = os.date("%d", t)
    local current_day = tointeger(current_day_str)
    local week = math.ceil(current_day / 7)
    if week == 1 then
      return "First"
    elseif week == 2 then
      return "Second"
    elseif week == 3 then
      return "Third"
    elseif week == 4 then
      return "Fourth"
    elseif week == 5 then
      return "Fifth"
    end
    return ""
  end

  local transactions, err = Transactions:select(map!(string, string,{
    user_id = norm.escape_literal(current_user_id)
  }))

  if err ~= "" then
    io.stderr:write(err .. "\n")
    return self:error()
  end

  local labels = "[]"
  local income_data = "[]"
  local expense_data = "[]"

  ## local function handle_data(period, period_fn, period_fmt, periods, timeframe)
    ## static_assert(type(period) == "string")
    ## static_assert(type(period_fn) == "table")
    ## static_assert(type(period_fmt) == "string")
    ## static_assert(type(periods) == "table")
    ## static_assert(type(timeframe) == "string")

    local periods: []string = #[periods]#
    labels = '["' .. string.concat(periods, '", "') .. '"]'
    local #|"same_" .. timeframe .. "_transactions"|#: sequence(norm.Model.Inst)
    for _, transaction in ipairs(transactions) do
      local transaction_time = transaction:get_col("time")
      if #|"is_same_" .. timeframe|#(tointeger(transaction_time), time) then
        #|"same_" .. timeframe .. "_transactions"|#:push(transaction)
      end
    end
    ## for _, period in ipairs(periods) do
      local #|period .. "_income_transactions"|#: sequence(string)
      local #|period .. "_expense_transactions"|#: sequence(string)
    ## end
    for i, transaction in ipairs(#|"same_" .. timeframe .. "_transactions"|#) do
      local transaction_time = transaction:get_col("time")
      local period = #[period_fn]#(#[period_fmt]#, tointeger(transaction_time))
      local amount = transaction:get_col("amount")
      ## for _, period in ipairs(periods) do
        if period == #[period]# then
          if transaction:get_col("type") == "Income" then
            #|period .. "_income_transactions"|#:push(amount)
          end
          if transaction:get_col("type") == "Expense" then
            #|period .. "_expense_transactions"|#:push(amount)
          end
        end
      ## end
    end

    local income_sb: stringbuilder
    local expense_sb: stringbuilder

    income_sb:write("[")
    expense_sb:write("[")

    ## for _, period in ipairs(periods) do
      local #|period .. "_income_data"|# = string.concat(#|period .. "_income_transactions"|#, ' + ')
      local #|period .. "_expense_data"|# = string.concat(#|period .. "_expense_transactions"|#, ' + ')
      income_sb:writef("%s ,", #|period .. "_income_data"|#)
      expense_sb:writef("%s ,", #|period .. "_expense_data"|#)
    ## end

    income_sb:rollback(1)
    expense_sb:rollback(1)

    income_sb:write("]")
    expense_sb:write("]")

    income_data = income_sb:promote()
    expense_data = expense_sb:promote()
  ## end

  if sort == "day" then
    labels = '["' .. os.date("%A", time) .. '"]'

    local income_transactions: sequence(string)
    local expense_transactions: sequence(string)

    for i, transaction in ipairs(transactions) do
      local transaction_time = transaction:get_col("time")
      if is_same_day(tointeger(transaction_time), time) then
        local amount = transaction:get_col("amount")
        if transaction:get_col("type") == "Income" then
          income_transactions:push(amount)
        end
        if transaction:get_col("type") == "Expense" then
          expense_transactions:push(amount)
        end
      end
    end

    income_data = "[" .. string.concat(income_transactions, "+") .. "]"
    expense_data = "[" .. string.concat(expense_transactions, "+") .. "]"
  elseif sort == "week" then
    ## local days = { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" }
    local os_date = os.date
    ## handle_data("day", os_date, "%A", days, "week")
  elseif sort == "month" then
    ## local days = { "First", "Second", "Third", "Fourth", "Fifth" }
    ## handle_data("week", get_week_of_month, "%d", days, "month")
  elseif sort == "year" then
    ## local months = { "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }
    local os_date = os.date
    ## handle_data("month", os_date, "%B", months, "year")
  end

  if (income_data == "[]" and expense_data == "[]") or (income_data:match("%d") == false and expense_data:match("%d") == false) then
    local tp: nelt.Template
    empty_analytics_chart(&tp)
    sseg:patch_elements(tp:tostring())
    return sseg.resp
  end

  local tp: nelt.Template
  analytics_chart(&tp, self, labels, income_data, expense_data)
  sseg:patch_elements(tp:tostring())

  return sseg.resp
end

return transactions_controller
